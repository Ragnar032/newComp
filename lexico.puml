@startuml
title Diagrama de Flujo Detallado del Analizador Semántico

start
:Recibir el Árbol de Sintaxis Abstracto (AST) del Parser;
:Iniciar el recorrido con **analyze(AST)**;
note right: El método 'visit(nodo)' actuará como despachador

:visit() despacha a **visit_DeclaracionVariable** para "int y = x + 5";
:Extraer nombre ("y") y tipo ("int") del nodo;
:Llamar a **variable_list.add_variable("y", "int")**;

if (La variable "y" ya existe en la Tabla de Símbolos?) then (sí)
    :Lanzar **SemanticError**: Variable Duplicada;
    goto error_state
else (no)
    :Continuar;
endif

note right: Ahora se debe validar la expresión a la derecha del '='.

:Llamar a **visit(nodo_expresion)** para "x + 5";
:visit() despacha a **visit_ExpresionBinaria** (operador "+");

:Llamar a **visit(hijo_izquierdo)** para "x";
:visit() despacha a **visit_Variable**;
:Llamar a **variable_list.find_variable("x")**;

if ("x" no se encuentra en la Tabla de Símbolos?) then (sí)
    :Lanzar **SemanticError**: Variable No Declarada;
    goto error_state
else (no)
    :Retornar el tipo de "x" (ej: "int");
endif

:Llamar a **visit(hijo_derecho)** para "5";
:visit() despacha a **visit_LiteralNumerico**;
:Determinar el tipo del literal (ej: "int");
:Retornar "int";

:Consultar matriz **type_rules['MAS']['int']['int']**;

if (La combinación de tipos da como resultado "error"?) then (sí)
    :Lanzar **SemanticError**: Tipos Incompatibles en Operación;
    goto error_state
else (no)
    :Retornar el tipo resultante de la operación (ej: "int");
endif

note right: Vuelve el control a visit_DeclaracionVariable

:Comparar tipo declarado ("int") con tipo de la expresión ("int");

if (Los tipos son incompatibles para la asignación?) then (sí)
    :Lanzar **SemanticError**: Tipos Incompatibles en Asignación;
    goto error_state
else (no)
    :La declaración de la variable "y" es semánticamente correcta;
endif

:Continuar visitando el resto de sentencias del AST;
if (Se llegó al final del árbol sin errores?) then (sí)
    :Análisis Semántico Completado con Éxito;
    stop
else (no)
    goto error_state
endif

label error_state
:Reportar el error semántico al usuario;
stop

@enduml