@startuml
title Proceso de Análisis Semántico

start
:main.py inicia con el `AST`;
:Crea una instancia de `Semantic()`;
note right: `Semantic` internamente crea una `VariableList`.
:Llama a `Semantic.analyze(AST)`;

partition Semantic {
    :El método `analyze()` llama a `visit(AST)`;
    
    partition "Visitor Pattern" {
        :<b>visit(nodo)</b> determina el tipo del nodo (ej: 'DeclaracionVariable');
        :Llama al método específico `visit_DeclaracionVariable(nodo)`;
        
        partition visit_DeclaracionVariable(nodo) {
            :Extrae `nombre` y `tipo_dato` del nodo;
            :Llama a `variable_list.add_variable(nombre, tipo_dato)`;
            
            if (la variable ya existe?) then (sí)
                :Lanza `SemanticError('Variable duplicada')`;
                end
            endif
            
            :Llama recursivamente a `visit(nodo.valor)` para obtener el tipo de la expresión;
            
            partition visit(expresion) anidado {
                :La visita recursiva continúa hasta llegar a las hojas (literales o variables);
                :Ej: `visit_Variable(nodo)` busca en `variable_list`;
                :Ej: `visit_ExpresionBinaria(nodo)` comprueba `type_rules`;
                :Retorna el tipo resultante de la expresión (ej: 'int');
            }
            
            :Compara `tipo_dato` con el tipo de la expresión;
            if (los tipos no coinciden?) then (sí)
                :Lanza `SemanticError('Incompatibilidad de tipos')`;
                end
            endif
        }
        
        :El proceso se repite para cada nodo del árbol;
    }
    
    :Si no se lanzan errores, el análisis termina con éxito;
}

:main.py recibe la confirmación de éxito;
stop
@enduml