@startuml

title Diagrama de Actividad Completo del Compilador

|Fase Léxica|
start
:Recibir Código Fuente en texto plano;
:El Lexer procesa el texto y lo convierte
en una Lista de Tokens;


|Fase Sintáctica|
:El Parser recibe la Lista de Tokens;
:Inicia la construcción del Árbol de
Sintaxis Abstracta (AST);

while (Hay más tokens por procesar?) is (sí)
  :Leer token actual;
  :Identificar la regla gramatical que aplica
  (ej. declaración de variable, expresión, etc.);
  :Crear el Nodo correspondiente para el AST;
  :Avanzar al siguiente token;
endwhile (no)

:Finalizar y devolver el AST completo;

|Fase Semántica|
:El SemanticAnalyzer recibe el AST;
:Inicia el recorrido del árbol (usando el patrón Visitor);

while (Hay nodos del AST por visitar?) is (sí)
  :Visitar el nodo actual;
  if (Nodo es una declaración?) then (sí)
    :Verificar si la variable ya existe.
    Añadir a la tabla de símbolos (`VariableList`);
  elseif (Nodo es una expresión?) then (no)
    :Verificar compatibilidad de tipos
    según las reglas definidas;
  elseif (Nodo usa una variable?)
    :Verificar si la variable fue declarada;
  endif
endwhile (no)

|Control Principal (main.py)|
if (Ocurrió algún error durante el proceso?) then (sí)
  :Capturar excepción (ParsingError o SemanticError);
  :Mostrar Mensaje de ERROR al usuario;
else (no)
  :Mostrar Mensaje: "Análisis completado con éxito";
endif

stop

@enduml